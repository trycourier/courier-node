/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Messages {
    export interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }

    export interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: string | undefined;
    }
}

export class Messages {
    constructor(protected readonly _options: Messages.Options = {}) {}

    /**
     * Fetch the statuses of messages you've previously sent.
     *
     * @param {Courier.ListMessagesRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.messages.list()
     */
    public list(
        request: Courier.ListMessagesRequest = {},
        requestOptions?: Messages.RequestOptions,
    ): core.HttpResponsePromise<Courier.ListMessagesResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Courier.ListMessagesRequest = {},
        requestOptions?: Messages.RequestOptions,
    ): Promise<core.WithRawResponse<Courier.ListMessagesResponse>> {
        const {
            archived,
            cursor,
            event,
            list,
            messageId,
            notification,
            provider,
            recipient,
            status,
            tag,
            tags,
            tenant_id: tenantId,
            enqueued_after: enqueuedAfter,
            traceId,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (archived != null) {
            _queryParams["archived"] = archived.toString();
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (event != null) {
            _queryParams["event"] = event;
        }

        if (list != null) {
            _queryParams["list"] = list;
        }

        if (messageId != null) {
            _queryParams["messageId"] = messageId;
        }

        if (notification != null) {
            _queryParams["notification"] = notification;
        }

        if (provider != null) {
            if (Array.isArray(provider)) {
                _queryParams["provider"] = provider.map((item) => item);
            } else {
                _queryParams["provider"] = provider;
            }
        }

        if (recipient != null) {
            _queryParams["recipient"] = recipient;
        }

        if (status != null) {
            if (Array.isArray(status)) {
                _queryParams["status"] = status.map((item) => item);
            } else {
                _queryParams["status"] = status;
            }
        }

        if (tag != null) {
            if (Array.isArray(tag)) {
                _queryParams["tag"] = tag.map((item) => item);
            } else {
                _queryParams["tag"] = tag;
            }
        }

        if (tags != null) {
            _queryParams["tags"] = tags;
        }

        if (tenantId != null) {
            _queryParams["tenant_id"] = tenantId;
        }

        if (enqueuedAfter != null) {
            _queryParams["enqueued_after"] = enqueuedAfter;
        }

        if (traceId != null) {
            _queryParams["traceId"] = traceId;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CourierEnvironment.Production,
                "messages",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@trycourier/courier",
                "X-Fern-SDK-Version": "6.4.2",
                "User-Agent": "@trycourier/courier/6.4.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Courier.ListMessagesResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CourierError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CourierError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CourierTimeoutError("Timeout exceeded when calling GET /messages.");
            case "unknown":
                throw new errors.CourierError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Fetch the status of a message you've previously sent.
     *
     * @param {string} messageId - A unique identifier associated with the message you wish to retrieve (results from a send).
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     * @throws {@link Courier.MessageNotFoundError}
     *
     * @example
     *     await client.messages.get("message_id")
     */
    public get(
        messageId: string,
        requestOptions?: Messages.RequestOptions,
    ): core.HttpResponsePromise<Courier.MessageDetailsExtended> {
        return core.HttpResponsePromise.fromPromise(this.__get(messageId, requestOptions));
    }

    private async __get(
        messageId: string,
        requestOptions?: Messages.RequestOptions,
    ): Promise<core.WithRawResponse<Courier.MessageDetailsExtended>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CourierEnvironment.Production,
                `messages/${encodeURIComponent(messageId)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@trycourier/courier",
                "X-Fern-SDK-Version": "6.4.2",
                "User-Agent": "@trycourier/courier/6.4.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Courier.MessageDetailsExtended, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Courier.BadRequestError(
                        _response.error.body as Courier.BadRequest,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Courier.MessageNotFoundError(
                        _response.error.body as Courier.MessageNotFound,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CourierError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CourierError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CourierTimeoutError("Timeout exceeded when calling GET /messages/{message_id}.");
            case "unknown":
                throw new errors.CourierError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Cancel a message that is currently in the process of being delivered. A well-formatted API call to the cancel message API will return either `200` status code for a successful cancellation or `409` status code for an unsuccessful cancellation. Both cases will include the actual message record in the response body (see details below).
     *
     * @param {string} messageId - A unique identifier representing the message ID
     * @param {Messages.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.messages.cancel("message_id")
     */
    public cancel(
        messageId: string,
        requestOptions?: Messages.IdempotentRequestOptions,
    ): core.HttpResponsePromise<Courier.MessageDetails> {
        return core.HttpResponsePromise.fromPromise(this.__cancel(messageId, requestOptions));
    }

    private async __cancel(
        messageId: string,
        requestOptions?: Messages.IdempotentRequestOptions,
    ): Promise<core.WithRawResponse<Courier.MessageDetails>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CourierEnvironment.Production,
                `messages/${encodeURIComponent(messageId)}/cancel`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@trycourier/courier",
                "X-Fern-SDK-Version": "6.4.2",
                "User-Agent": "@trycourier/courier/6.4.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                "Idempotency-Key": requestOptions?.idempotencyKey != null ? requestOptions?.idempotencyKey : undefined,
                "X-Idempotency-Expiration":
                    requestOptions?.idempotencyExpiry != null ? requestOptions?.idempotencyExpiry : undefined,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Courier.MessageDetails, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CourierError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CourierError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CourierTimeoutError(
                    "Timeout exceeded when calling POST /messages/{message_id}/cancel.",
                );
            case "unknown":
                throw new errors.CourierError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Fetch the array of events of a message you've previously sent.
     *
     * @param {string} messageId - A unique identifier representing the message ID
     * @param {Courier.GetMessageHistoryRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     * @throws {@link Courier.MessageNotFoundError}
     *
     * @example
     *     await client.messages.getHistory("message_id")
     */
    public getHistory(
        messageId: string,
        request: Courier.GetMessageHistoryRequest = {},
        requestOptions?: Messages.RequestOptions,
    ): core.HttpResponsePromise<Courier.MessageHistoryResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getHistory(messageId, request, requestOptions));
    }

    private async __getHistory(
        messageId: string,
        request: Courier.GetMessageHistoryRequest = {},
        requestOptions?: Messages.RequestOptions,
    ): Promise<core.WithRawResponse<Courier.MessageHistoryResponse>> {
        const { type: type_ } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (type_ != null) {
            _queryParams["type"] = type_;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CourierEnvironment.Production,
                `messages/${encodeURIComponent(messageId)}/history`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@trycourier/courier",
                "X-Fern-SDK-Version": "6.4.2",
                "User-Agent": "@trycourier/courier/6.4.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Courier.MessageHistoryResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Courier.BadRequestError(
                        _response.error.body as Courier.BadRequest,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Courier.MessageNotFoundError(
                        _response.error.body as Courier.MessageNotFound,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CourierError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CourierError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CourierTimeoutError(
                    "Timeout exceeded when calling GET /messages/{message_id}/history.",
                );
            case "unknown":
                throw new errors.CourierError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} messageId - A unique identifier associated with the message you wish to retrieve (results from a send).
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     * @throws {@link Courier.MessageNotFoundError}
     *
     * @example
     *     await client.messages.getContent("message_id")
     */
    public getContent(
        messageId: string,
        requestOptions?: Messages.RequestOptions,
    ): core.HttpResponsePromise<Courier.RenderOutputResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getContent(messageId, requestOptions));
    }

    private async __getContent(
        messageId: string,
        requestOptions?: Messages.RequestOptions,
    ): Promise<core.WithRawResponse<Courier.RenderOutputResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CourierEnvironment.Production,
                `messages/${encodeURIComponent(messageId)}/output`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@trycourier/courier",
                "X-Fern-SDK-Version": "6.4.2",
                "User-Agent": "@trycourier/courier/6.4.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Courier.RenderOutputResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Courier.BadRequestError(
                        _response.error.body as Courier.BadRequest,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Courier.MessageNotFoundError(
                        _response.error.body as Courier.MessageNotFound,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CourierError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CourierError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CourierTimeoutError(
                    "Timeout exceeded when calling GET /messages/{message_id}/output.",
                );
            case "unknown":
                throw new errors.CourierError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} requestId - A unique identifier representing the request ID
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.messages.archive("request_id")
     */
    public archive(requestId: string, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__archive(requestId, requestOptions));
    }

    private async __archive(
        requestId: string,
        requestOptions?: Messages.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CourierEnvironment.Production,
                `requests/${encodeURIComponent(requestId)}/archive`,
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@trycourier/courier",
                "X-Fern-SDK-Version": "6.4.2",
                "User-Agent": "@trycourier/courier/6.4.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CourierError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CourierError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CourierTimeoutError(
                    "Timeout exceeded when calling PUT /requests/{request_id}/archive.",
                );
            case "unknown":
                throw new errors.CourierError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer =
            (await core.Supplier.get(this._options.authorizationToken)) ?? process?.env["COURIER_AUTH_TOKEN"];
        if (bearer == null) {
            throw new errors.CourierError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a COURIER_AUTH_TOKEN environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
