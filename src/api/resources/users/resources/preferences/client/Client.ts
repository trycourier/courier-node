/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Courier from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Preferences {
    export interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class Preferences {
    protected readonly _options: Preferences.Options;

    constructor(_options: Preferences.Options = {}) {
        this._options = _options;
    }

    /**
     * Fetch all user preferences.
     *
     * @param {string} userId - A unique identifier associated with the user whose preferences you wish to retrieve.
     * @param {Courier.users.UserPreferencesParams} request
     * @param {Preferences.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.users.preferences.list("user_id")
     */
    public list(
        userId: string,
        request: Courier.users.UserPreferencesParams = {},
        requestOptions?: Preferences.RequestOptions,
    ): core.HttpResponsePromise<Courier.users.UserPreferencesListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(userId, request, requestOptions));
    }

    private async __list(
        userId: string,
        request: Courier.users.UserPreferencesParams = {},
        requestOptions?: Preferences.RequestOptions,
    ): Promise<core.WithRawResponse<Courier.users.UserPreferencesListResponse>> {
        const { tenant_id: tenantId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (tenantId != null) {
            _queryParams["tenant_id"] = tenantId;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CourierEnvironment.Production,
                `/users/${encodeURIComponent(userId)}/preferences`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Courier.users.UserPreferencesListResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Courier.BadRequestError(
                        _response.error.body as Courier.BadRequest,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CourierError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CourierError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CourierTimeoutError("Timeout exceeded when calling GET /users/{user_id}/preferences.");
            case "unknown":
                throw new errors.CourierError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Fetch user preferences for a specific subscription topic.
     *
     * @param {string} userId - A unique identifier associated with the user whose preferences you wish to retrieve.
     * @param {string} topicId - A unique identifier associated with a subscription topic.
     * @param {Courier.users.UserPreferencesTopicParams} request
     * @param {Preferences.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.NotFoundError}
     *
     * @example
     *     await client.users.preferences.get("user_id", "topic_id")
     */
    public get(
        userId: string,
        topicId: string,
        request: Courier.users.UserPreferencesTopicParams = {},
        requestOptions?: Preferences.RequestOptions,
    ): core.HttpResponsePromise<Courier.users.UserPreferencesGetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(userId, topicId, request, requestOptions));
    }

    private async __get(
        userId: string,
        topicId: string,
        request: Courier.users.UserPreferencesTopicParams = {},
        requestOptions?: Preferences.RequestOptions,
    ): Promise<core.WithRawResponse<Courier.users.UserPreferencesGetResponse>> {
        const { tenant_id: tenantId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (tenantId != null) {
            _queryParams["tenant_id"] = tenantId;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CourierEnvironment.Production,
                `/users/${encodeURIComponent(userId)}/preferences/${encodeURIComponent(topicId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Courier.users.UserPreferencesGetResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Courier.NotFoundError(_response.error.body as Courier.NotFound, _response.rawResponse);
                default:
                    throw new errors.CourierError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CourierError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CourierTimeoutError(
                    "Timeout exceeded when calling GET /users/{user_id}/preferences/{topic_id}.",
                );
            case "unknown":
                throw new errors.CourierError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update or Create user preferences for a specific subscription topic.
     *
     * @param {string} userId - A unique identifier associated with the user whose preferences you wish to retrieve.
     * @param {string} topicId - A unique identifier associated with a subscription topic.
     * @param {Courier.users.UserPreferencesUpdateParams} request
     * @param {Preferences.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.users.preferences.update("abc-123", "74Q4QGFBEX481DP6JRPMV751H4XT", {
     *         topic: {
     *             status: "OPTED_IN",
     *             has_custom_routing: true,
     *             custom_routing: ["inbox", "email"]
     *         }
     *     })
     */
    public update(
        userId: string,
        topicId: string,
        request: Courier.users.UserPreferencesUpdateParams,
        requestOptions?: Preferences.RequestOptions,
    ): core.HttpResponsePromise<Courier.users.UserPreferencesUpdateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(userId, topicId, request, requestOptions));
    }

    private async __update(
        userId: string,
        topicId: string,
        request: Courier.users.UserPreferencesUpdateParams,
        requestOptions?: Preferences.RequestOptions,
    ): Promise<core.WithRawResponse<Courier.users.UserPreferencesUpdateResponse>> {
        const { tenant_id: tenantId, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (tenantId != null) {
            _queryParams["tenant_id"] = tenantId;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CourierEnvironment.Production,
                `/users/${encodeURIComponent(userId)}/preferences/${encodeURIComponent(topicId)}`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Courier.users.UserPreferencesUpdateResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Courier.BadRequestError(
                        _response.error.body as Courier.BadRequest,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CourierError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CourierError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CourierTimeoutError(
                    "Timeout exceeded when calling PUT /users/{user_id}/preferences/{topic_id}.",
                );
            case "unknown":
                throw new errors.CourierError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer =
            (await core.Supplier.get(this._options.authorizationToken)) ?? process?.env["COURIER_AUTH_TOKEN"];
        if (bearer == null) {
            throw new errors.CourierError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a COURIER_AUTH_TOKEN environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
