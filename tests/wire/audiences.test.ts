/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CourierClient } from "../../src/Client";
import * as Courier from "../../src/api/index";

describe("Audiences", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            filter: { value: "value", path: "path", operator: "ENDS_WITH" },
            created_at: "created_at",
            updated_at: "updated_at",
        };
        server
            .mockEndpoint()
            .get("/audiences/audience_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.audiences.get("audience_id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            filter: {
                value: "value",
                path: "path",
                operator: "ENDS_WITH",
            },
            created_at: "created_at",
            updated_at: "updated_at",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = { name: undefined, description: undefined, filter: undefined };
        const rawResponseBody = {
            audience: {
                id: "id",
                name: "name",
                description: "description",
                filter: { value: "value", path: "path", operator: "ENDS_WITH" },
                created_at: "created_at",
                updated_at: "updated_at",
            },
        };
        server
            .mockEndpoint()
            .put("/audiences/audience_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.audiences.update("audience_id", {
            name: undefined,
            description: undefined,
            filter: undefined,
        });
        expect(response).toEqual({
            audience: {
                id: "id",
                name: "name",
                description: "description",
                filter: {
                    value: "value",
                    path: "path",
                    operator: "ENDS_WITH",
                },
                created_at: "created_at",
                updated_at: "updated_at",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/audiences/audience_id").respondWith().statusCode(200).build();

        const response = await client.audiences.delete("audience_id");
        expect(response).toEqual(undefined);
    });

    test("listMembers (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            items: [
                {
                    added_at: "added_at",
                    audience_id: "audience_id",
                    audience_version: 1,
                    member_id: "member_id",
                    reason: "reason",
                },
                {
                    added_at: "added_at",
                    audience_id: "audience_id",
                    audience_version: 1,
                    member_id: "member_id",
                    reason: "reason",
                },
            ],
            paging: { cursor: "cursor", more: true },
        };
        server
            .mockEndpoint()
            .get("/audiences/audience_id/members")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.audiences.listMembers("audience_id");
        expect(response).toEqual({
            items: [
                {
                    added_at: "added_at",
                    audience_id: "audience_id",
                    audience_version: 1,
                    member_id: "member_id",
                    reason: "reason",
                },
                {
                    added_at: "added_at",
                    audience_id: "audience_id",
                    audience_version: 1,
                    member_id: "member_id",
                    reason: "reason",
                },
            ],
            paging: {
                cursor: "cursor",
                more: true,
            },
        });
    });

    test("listMembers (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/audiences/audience_id/members")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.audiences.listMembers("audience_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("listAudiences (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            items: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    filter: { value: "value", path: "path", operator: "ENDS_WITH" },
                    created_at: "created_at",
                    updated_at: "updated_at",
                },
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    filter: { value: "value", path: "path", operator: "ENDS_WITH" },
                    created_at: "created_at",
                    updated_at: "updated_at",
                },
            ],
            paging: { cursor: "cursor", more: true },
        };
        server.mockEndpoint().get("/audiences").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.audiences.listAudiences();
        expect(response).toEqual({
            items: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    filter: {
                        value: "value",
                        path: "path",
                        operator: "ENDS_WITH",
                    },
                    created_at: "created_at",
                    updated_at: "updated_at",
                },
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    filter: {
                        value: "value",
                        path: "path",
                        operator: "ENDS_WITH",
                    },
                    created_at: "created_at",
                    updated_at: "updated_at",
                },
            ],
            paging: {
                cursor: "cursor",
                more: true,
            },
        });
    });

    test("listAudiences (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server.mockEndpoint().get("/audiences").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.audiences.listAudiences();
        }).rejects.toThrow(Courier.BadRequestError);
    });
});
