/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CourierClient } from "../../src/Client";

describe("AuditEvents", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            paging: { cursor: "cursor", more: true },
            results: [
                {
                    actor: { id: "id", email: "email" },
                    target: { id: "id", email: "email" },
                    auditEventId: "auditEventId",
                    source: "source",
                    timestamp: "timestamp",
                    type: "type",
                },
                {
                    actor: { id: "id", email: "email" },
                    target: { id: "id", email: "email" },
                    auditEventId: "auditEventId",
                    source: "source",
                    timestamp: "timestamp",
                    type: "type",
                },
            ],
        };
        server.mockEndpoint().get("/audit-events").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.auditEvents.list();
        expect(response).toEqual({
            paging: {
                cursor: "cursor",
                more: true,
            },
            results: [
                {
                    actor: {
                        id: "id",
                        email: "email",
                    },
                    target: {
                        id: "id",
                        email: "email",
                    },
                    auditEventId: "auditEventId",
                    source: "source",
                    timestamp: "timestamp",
                    type: "type",
                },
                {
                    actor: {
                        id: "id",
                        email: "email",
                    },
                    target: {
                        id: "id",
                        email: "email",
                    },
                    auditEventId: "auditEventId",
                    source: "source",
                    timestamp: "timestamp",
                    type: "type",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            actor: { id: "id", email: "email" },
            target: { id: "id", email: "email" },
            auditEventId: "auditEventId",
            source: "source",
            timestamp: "timestamp",
            type: "type",
        };
        server
            .mockEndpoint()
            .get("/audit-events/audit-event-id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.auditEvents.get("audit-event-id");
        expect(response).toEqual({
            actor: {
                id: "id",
                email: "email",
            },
            target: {
                id: "id",
                email: "email",
            },
            auditEventId: "auditEventId",
            source: "source",
            timestamp: "timestamp",
            type: "type",
        });
    });
});
