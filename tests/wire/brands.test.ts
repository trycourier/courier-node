/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CourierClient } from "../../src/Client";
import * as Courier from "../../src/api/index";

describe("Brands", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            created: 1,
            id: "id",
            name: "name",
            published: 1,
            settings: {
                colors: { primary: "primary", secondary: "secondary", tertiary: "tertiary" },
                inapp: { key: "value" },
                email: { footer: { key: "value" }, header: { key: "value" } },
            },
            updated: 1,
            snippets: {
                items: [
                    { format: "handlebars", name: "name", value: "value" },
                    { format: "handlebars", name: "name", value: "value" },
                ],
            },
            version: "version",
        };
        server.mockEndpoint().get("/brands/brand_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.brands.get("brand_id");
        expect(response).toEqual({
            created: 1,
            id: "id",
            name: "name",
            published: 1,
            settings: {
                colors: {
                    primary: "primary",
                    secondary: "secondary",
                    tertiary: "tertiary",
                },
                inapp: {
                    key: "value",
                },
                email: {
                    footer: {
                        key: "value",
                    },
                    header: {
                        key: "value",
                    },
                },
            },
            updated: 1,
            snippets: {
                items: [
                    {
                        format: "handlebars",
                        name: "name",
                        value: "value",
                    },
                    {
                        format: "handlebars",
                        name: "name",
                        value: "value",
                    },
                ],
            },
            version: "version",
        });
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            paging: { cursor: "cursor", more: true },
            results: [
                {
                    created: 1,
                    id: "id",
                    name: "name",
                    published: 1,
                    settings: {
                        colors: { primary: "primary", secondary: "secondary", tertiary: "tertiary" },
                        inapp: { key: "value" },
                        email: { footer: { key: "value" }, header: { key: "value" } },
                    },
                    updated: 1,
                    snippets: {
                        items: [
                            { format: "handlebars", name: "name", value: "value" },
                            { format: "handlebars", name: "name", value: "value" },
                        ],
                    },
                    version: "version",
                },
                {
                    created: 1,
                    id: "id",
                    name: "name",
                    published: 1,
                    settings: {
                        colors: { primary: "primary", secondary: "secondary", tertiary: "tertiary" },
                        inapp: { key: "value" },
                        email: { footer: { key: "value" }, header: { key: "value" } },
                    },
                    updated: 1,
                    snippets: {
                        items: [
                            { format: "handlebars", name: "name", value: "value" },
                            { format: "handlebars", name: "name", value: "value" },
                        ],
                    },
                    version: "version",
                },
            ],
        };
        server.mockEndpoint().get("/brands").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.brands.list();
        expect(response).toEqual({
            paging: {
                cursor: "cursor",
                more: true,
            },
            results: [
                {
                    created: 1,
                    id: "id",
                    name: "name",
                    published: 1,
                    settings: {
                        colors: {
                            primary: "primary",
                            secondary: "secondary",
                            tertiary: "tertiary",
                        },
                        inapp: {
                            key: "value",
                        },
                        email: {
                            footer: {
                                key: "value",
                            },
                            header: {
                                key: "value",
                            },
                        },
                    },
                    updated: 1,
                    snippets: {
                        items: [
                            {
                                format: "handlebars",
                                name: "name",
                                value: "value",
                            },
                            {
                                format: "handlebars",
                                name: "name",
                                value: "value",
                            },
                        ],
                    },
                    version: "version",
                },
                {
                    created: 1,
                    id: "id",
                    name: "name",
                    published: 1,
                    settings: {
                        colors: {
                            primary: "primary",
                            secondary: "secondary",
                            tertiary: "tertiary",
                        },
                        inapp: {
                            key: "value",
                        },
                        email: {
                            footer: {
                                key: "value",
                            },
                            header: {
                                key: "value",
                            },
                        },
                    },
                    updated: 1,
                    snippets: {
                        items: [
                            {
                                format: "handlebars",
                                name: "name",
                                value: "value",
                            },
                            {
                                format: "handlebars",
                                name: "name",
                                value: "value",
                            },
                        ],
                    },
                    version: "version",
                },
            ],
        });
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/brands/brand_id").respondWith().statusCode(200).build();

        const response = await client.brands.delete("brand_id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .delete("/brands/brand_id")
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.delete("brand_id");
        }).rejects.toThrow(Courier.ConflictError);
    });

    test("replace", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", settings: undefined, snippets: undefined };
        const rawResponseBody = {
            created: 1,
            id: "id",
            name: "name",
            published: 1,
            settings: {
                colors: { primary: "primary", secondary: "secondary", tertiary: "tertiary" },
                inapp: { key: "value" },
                email: { footer: { key: "value" }, header: { key: "value" } },
            },
            updated: 1,
            snippets: {
                items: [
                    { format: "handlebars", name: "name", value: "value" },
                    { format: "handlebars", name: "name", value: "value" },
                ],
            },
            version: "version",
        };
        server
            .mockEndpoint()
            .put("/brands/brand_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.brands.replace("brand_id", {
            name: "name",
            settings: undefined,
            snippets: undefined,
        });
        expect(response).toEqual({
            created: 1,
            id: "id",
            name: "name",
            published: 1,
            settings: {
                colors: {
                    primary: "primary",
                    secondary: "secondary",
                    tertiary: "tertiary",
                },
                inapp: {
                    key: "value",
                },
                email: {
                    footer: {
                        key: "value",
                    },
                    header: {
                        key: "value",
                    },
                },
            },
            updated: 1,
            snippets: {
                items: [
                    {
                        format: "handlebars",
                        name: "name",
                        value: "value",
                    },
                    {
                        format: "handlebars",
                        name: "name",
                        value: "value",
                    },
                ],
            },
            version: "version",
        });
    });
});
