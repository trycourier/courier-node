/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CourierClient } from "../../src/Client";
import * as Courier from "../../src/api/index";

describe("Bulk", () => {
    test("getJob (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            job: {
                definition: {
                    message: {
                        template: "template",
                        data: { data: { key: "value" } },
                        brand_id: "brand_id",
                        channels: {
                            channels: {
                                brand_id: "brand_id",
                                providers: [],
                                routing_method: "all",
                                if: "if",
                                timeouts: {},
                                override: {},
                                metadata: {},
                            },
                        },
                        context: { tenant_id: "tenant_id" },
                        metadata: {
                            event: "event",
                            tags: ["tags", "tags"],
                            utm: {
                                source: undefined,
                                medium: undefined,
                                campaign: undefined,
                                term: undefined,
                                content: undefined,
                            },
                            trace_id: "trace_id",
                        },
                        preferences: { subscription_topic_id: "subscription_topic_id" },
                        providers: { providers: { override: {}, if: "if", timeouts: 1, metadata: {} } },
                        routing: { method: "all", channels: ["channels", "channels"] },
                        timeout: {
                            provider: { provider: 1 },
                            channel: { channel: 1 },
                            message: 1,
                            escalation: 1,
                            criteria: "no-escalation",
                        },
                        delay: { duration: 1, until: "until" },
                        expiry: { expires_at: "expires_at", expires_in: "expires_in" },
                    },
                    brand: "brand",
                    data: { data: { key: "value" } },
                    event: "event",
                    locale: { locale: { key: "value" } },
                    override: { key: "value" },
                },
                enqueued: 1,
                failures: 1,
                received: 1,
                status: "CREATED",
            },
        };
        server.mockEndpoint().get("/bulk/job_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.bulk.getJob("job_id");
        expect(response).toEqual({
            job: {
                definition: {
                    message: {
                        template: "template",
                        data: {
                            data: {
                                key: "value",
                            },
                        },
                        brand_id: "brand_id",
                        channels: {
                            channels: {
                                brand_id: "brand_id",
                                providers: [],
                                routing_method: "all",
                                if: "if",
                                timeouts: {},
                                override: {},
                                metadata: {},
                            },
                        },
                        context: {
                            tenant_id: "tenant_id",
                        },
                        metadata: {
                            event: "event",
                            tags: ["tags", "tags"],
                            utm: {
                                source: undefined,
                                medium: undefined,
                                campaign: undefined,
                                term: undefined,
                                content: undefined,
                            },
                            trace_id: "trace_id",
                        },
                        preferences: {
                            subscription_topic_id: "subscription_topic_id",
                        },
                        providers: {
                            providers: {
                                override: {},
                                if: "if",
                                timeouts: 1,
                                metadata: {},
                            },
                        },
                        routing: {
                            method: "all",
                            channels: ["channels", "channels"],
                        },
                        timeout: {
                            provider: {
                                provider: 1,
                            },
                            channel: {
                                channel: 1,
                            },
                            message: 1,
                            escalation: 1,
                            criteria: "no-escalation",
                        },
                        delay: {
                            duration: 1,
                            until: "until",
                        },
                        expiry: {
                            expires_at: "expires_at",
                            expires_in: "expires_in",
                        },
                    },
                    brand: "brand",
                    data: {
                        data: {
                            key: "value",
                        },
                    },
                    event: "event",
                    locale: {
                        locale: {
                            key: "value",
                        },
                    },
                    override: {
                        key: "value",
                    },
                },
                enqueued: 1,
                failures: 1,
                received: 1,
                status: "CREATED",
            },
        });
    });

    test("getJob (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server.mockEndpoint().get("/bulk/job_id").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bulk.getJob("job_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("getUsers (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            items: [
                {
                    status: "PENDING",
                    messageId: "messageId",
                    preferences: {
                        categories: { categories: { status: "OPTED_IN", rules: [], channel_preferences: [] } },
                        notifications: { notifications: { status: "OPTED_IN", rules: [], channel_preferences: [] } },
                    },
                    profile: { key: "value" },
                    recipient: "recipient",
                    data: { key: "value" },
                    to: {
                        account_id: "account_id",
                        context: { tenant_id: "tenant_id" },
                        data: { data: { key: "value" } },
                        email: "email",
                        locale: "locale",
                        user_id: "user_id",
                        phone_number: "phone_number",
                        preferences: {
                            categories: {
                                categories: {
                                    status: "OPTED_IN",
                                    rules: undefined,
                                    channel_preferences: undefined,
                                    source: undefined,
                                },
                            },
                            notifications: {
                                notifications: {
                                    status: "OPTED_IN",
                                    rules: [],
                                    channel_preferences: [],
                                    source: "subscription",
                                },
                            },
                            templateId: "templateId",
                        },
                        tenant_id: "tenant_id",
                    },
                },
                {
                    status: "PENDING",
                    messageId: "messageId",
                    preferences: {
                        categories: { categories: { status: "OPTED_IN", rules: [], channel_preferences: [] } },
                        notifications: { notifications: { status: "OPTED_IN", rules: [], channel_preferences: [] } },
                    },
                    profile: { key: "value" },
                    recipient: "recipient",
                    data: { key: "value" },
                    to: {
                        account_id: "account_id",
                        context: { tenant_id: "tenant_id" },
                        data: { data: { key: "value" } },
                        email: "email",
                        locale: "locale",
                        user_id: "user_id",
                        phone_number: "phone_number",
                        preferences: {
                            categories: {
                                categories: {
                                    status: "OPTED_IN",
                                    rules: undefined,
                                    channel_preferences: undefined,
                                    source: undefined,
                                },
                            },
                            notifications: {
                                notifications: {
                                    status: "OPTED_IN",
                                    rules: [],
                                    channel_preferences: [],
                                    source: "subscription",
                                },
                            },
                            templateId: "templateId",
                        },
                        tenant_id: "tenant_id",
                    },
                },
            ],
            paging: { cursor: "cursor", more: true },
        };
        server.mockEndpoint().get("/bulk/job_id/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.bulk.getUsers("job_id");
        expect(response).toEqual({
            items: [
                {
                    status: "PENDING",
                    messageId: "messageId",
                    preferences: {
                        categories: {
                            categories: {
                                status: "OPTED_IN",
                                rules: [],
                                channel_preferences: [],
                            },
                        },
                        notifications: {
                            notifications: {
                                status: "OPTED_IN",
                                rules: [],
                                channel_preferences: [],
                            },
                        },
                    },
                    profile: {
                        key: "value",
                    },
                    recipient: "recipient",
                    data: {
                        key: "value",
                    },
                    to: {
                        account_id: "account_id",
                        context: {
                            tenant_id: "tenant_id",
                        },
                        data: {
                            data: {
                                key: "value",
                            },
                        },
                        email: "email",
                        locale: "locale",
                        user_id: "user_id",
                        phone_number: "phone_number",
                        preferences: {
                            categories: {
                                categories: {
                                    status: "OPTED_IN",
                                    rules: undefined,
                                    channel_preferences: undefined,
                                    source: undefined,
                                },
                            },
                            notifications: {
                                notifications: {
                                    status: "OPTED_IN",
                                    rules: [],
                                    channel_preferences: [],
                                    source: "subscription",
                                },
                            },
                            templateId: "templateId",
                        },
                        tenant_id: "tenant_id",
                    },
                },
                {
                    status: "PENDING",
                    messageId: "messageId",
                    preferences: {
                        categories: {
                            categories: {
                                status: "OPTED_IN",
                                rules: [],
                                channel_preferences: [],
                            },
                        },
                        notifications: {
                            notifications: {
                                status: "OPTED_IN",
                                rules: [],
                                channel_preferences: [],
                            },
                        },
                    },
                    profile: {
                        key: "value",
                    },
                    recipient: "recipient",
                    data: {
                        key: "value",
                    },
                    to: {
                        account_id: "account_id",
                        context: {
                            tenant_id: "tenant_id",
                        },
                        data: {
                            data: {
                                key: "value",
                            },
                        },
                        email: "email",
                        locale: "locale",
                        user_id: "user_id",
                        phone_number: "phone_number",
                        preferences: {
                            categories: {
                                categories: {
                                    status: "OPTED_IN",
                                    rules: undefined,
                                    channel_preferences: undefined,
                                    source: undefined,
                                },
                            },
                            notifications: {
                                notifications: {
                                    status: "OPTED_IN",
                                    rules: [],
                                    channel_preferences: [],
                                    source: "subscription",
                                },
                            },
                            templateId: "templateId",
                        },
                        tenant_id: "tenant_id",
                    },
                },
            ],
            paging: {
                cursor: "cursor",
                more: true,
            },
        });
    });

    test("getUsers (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server.mockEndpoint().get("/bulk/job_id/users").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bulk.getUsers("job_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });
});
