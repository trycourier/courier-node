/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CourierClient } from "../../src/Client";
import * as Courier from "../../src/api/index";

describe("Inbound", () => {
    test("track (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            event: "New Order Placed",
            messageId: "4c62c457-b329-4bea-9bfc-17bba86c393f",
            userId: "1234",
            type: "track",
            properties: { order_id: 123, total_orders: 5, last_order_id: 122 },
        };
        const rawResponseBody = { messageId: "1-65f240a0-47a6a120c8374de9bcf9f22c" };
        server
            .mockEndpoint()
            .post("/inbound/courier")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inbound.track({
            event: "New Order Placed",
            messageId: "4c62c457-b329-4bea-9bfc-17bba86c393f",
            userId: "1234",
            type: "track",
            properties: {
                order_id: 123,
                total_orders: 5,
                last_order_id: 122,
            },
        });
        expect(response).toEqual({
            messageId: "1-65f240a0-47a6a120c8374de9bcf9f22c",
        });
    });

    test("track (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            event: "event",
            messageId: "messageId",
            properties: { properties: { key: "value" } },
            type: "track",
            userId: undefined,
        };
        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .post("/inbound/courier")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.inbound.track({
                event: "event",
                messageId: "messageId",
                properties: {
                    properties: {
                        key: "value",
                    },
                },
                type: "track",
                userId: undefined,
            });
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("track (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            event: "event",
            messageId: "messageId",
            properties: { properties: { key: "value" } },
            type: "track",
            userId: undefined,
        };
        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .post("/inbound/courier")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.inbound.track({
                event: "event",
                messageId: "messageId",
                properties: {
                    properties: {
                        key: "value",
                    },
                },
                type: "track",
                userId: undefined,
            });
        }).rejects.toThrow(Courier.ConflictError);
    });
});
