/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CourierClient } from "../../src/Client";
import * as Courier from "../../src/api/index";

describe("Lists", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            paging: { cursor: "cursor", more: true },
            items: [
                { id: "id", name: "name", created: "created", updated: "updated" },
                { id: "id", name: "name", created: "created", updated: "updated" },
            ],
        };
        server.mockEndpoint().get("/lists").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.lists.list();
        expect(response).toEqual({
            paging: {
                cursor: "cursor",
                more: true,
            },
            items: [
                {
                    id: "id",
                    name: "name",
                    created: "created",
                    updated: "updated",
                },
                {
                    id: "id",
                    name: "name",
                    created: "created",
                    updated: "updated",
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server.mockEndpoint().get("/lists").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.lists.list();
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { id: "id", name: "name", created: "created", updated: "updated" };
        server.mockEndpoint().get("/lists/list_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.lists.get("list_id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            created: "created",
            updated: "updated",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server.mockEndpoint().get("/lists/list_id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.lists.get("list_id");
        }).rejects.toThrow(Courier.NotFoundError);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", preferences: undefined };

        server.mockEndpoint().put("/lists/list_id").jsonBody(rawRequestBody).respondWith().statusCode(200).build();

        const response = await client.lists.update("list_id", {
            name: "name",
            preferences: undefined,
        });
        expect(response).toEqual(undefined);
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/lists/list_id").respondWith().statusCode(200).build();

        const response = await client.lists.delete("list_id");
        expect(response).toEqual(undefined);
    });

    test("restore", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {};

        server
            .mockEndpoint()
            .put("/lists/list_id/restore")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.lists.restore("list_id");
        expect(response).toEqual(undefined);
    });

    test("getSubscribers (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            paging: { cursor: "cursor", more: true },
            items: [
                {
                    recipientId: "recipientId",
                    created: "created",
                    preferences: {
                        categories: { categories: { status: "OPTED_IN", rules: [], channel_preferences: [] } },
                        notifications: { notifications: { status: "OPTED_IN", rules: [], channel_preferences: [] } },
                    },
                },
                {
                    recipientId: "recipientId",
                    created: "created",
                    preferences: {
                        categories: { categories: { status: "OPTED_IN", rules: [], channel_preferences: [] } },
                        notifications: { notifications: { status: "OPTED_IN", rules: [], channel_preferences: [] } },
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/lists/list_id/subscriptions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.lists.getSubscribers("list_id");
        expect(response).toEqual({
            paging: {
                cursor: "cursor",
                more: true,
            },
            items: [
                {
                    recipientId: "recipientId",
                    created: "created",
                    preferences: {
                        categories: {
                            categories: {
                                status: "OPTED_IN",
                                rules: [],
                                channel_preferences: [],
                            },
                        },
                        notifications: {
                            notifications: {
                                status: "OPTED_IN",
                                rules: [],
                                channel_preferences: [],
                            },
                        },
                    },
                },
                {
                    recipientId: "recipientId",
                    created: "created",
                    preferences: {
                        categories: {
                            categories: {
                                status: "OPTED_IN",
                                rules: [],
                                channel_preferences: [],
                            },
                        },
                        notifications: {
                            notifications: {
                                status: "OPTED_IN",
                                rules: [],
                                channel_preferences: [],
                            },
                        },
                    },
                },
            ],
        });
    });

    test("getSubscribers (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/lists/list_id/subscriptions")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.lists.getSubscribers("list_id");
        }).rejects.toThrow(Courier.NotFoundError);
    });

    test("updateSubscribers (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            recipients: [
                { recipientId: "recipientId", preferences: undefined },
                { recipientId: "recipientId", preferences: undefined },
            ],
        };

        server
            .mockEndpoint()
            .put("/lists/list_id/subscriptions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.lists.updateSubscribers("list_id", {
            recipients: [
                {
                    recipientId: "recipientId",
                    preferences: undefined,
                },
                {
                    recipientId: "recipientId",
                    preferences: undefined,
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("updateSubscribers (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            recipients: [
                { recipientId: "recipientId", preferences: undefined },
                { recipientId: "recipientId", preferences: undefined },
            ],
        };
        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .put("/lists/list_id/subscriptions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.lists.updateSubscribers("list_id", {
                recipients: [
                    {
                        recipientId: "recipientId",
                        preferences: undefined,
                    },
                    {
                        recipientId: "recipientId",
                        preferences: undefined,
                    },
                ],
            });
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("subscribe", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = { preferences: undefined };

        server
            .mockEndpoint()
            .put("/lists/list_id/subscriptions/user_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.lists.subscribe("list_id", "user_id", {
            preferences: undefined,
        });
        expect(response).toEqual(undefined);
    });

    test("unsubscribe (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/lists/list_id/subscriptions/user_id").respondWith().statusCode(200).build();

        const response = await client.lists.unsubscribe("list_id", "user_id");
        expect(response).toEqual(undefined);
    });

    test("unsubscribe (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .delete("/lists/list_id/subscriptions/user_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.lists.unsubscribe("list_id", "user_id");
        }).rejects.toThrow(Courier.NotFoundError);
    });
});
