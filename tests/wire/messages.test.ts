/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CourierClient } from "../../src/Client";
import * as Courier from "../../src/api/index";

describe("Messages", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            paging: { cursor: "cursor", more: true },
            results: [
                {
                    id: "id",
                    status: "CANCELED",
                    enqueued: 1000000,
                    sent: 1000000,
                    delivered: 1000000,
                    opened: 1000000,
                    clicked: 1000000,
                    recipient: "recipient",
                    event: "event",
                    notification: "notification",
                    error: "error",
                    reason: "BOUNCED",
                },
                {
                    id: "id",
                    status: "CANCELED",
                    enqueued: 1000000,
                    sent: 1000000,
                    delivered: 1000000,
                    opened: 1000000,
                    clicked: 1000000,
                    recipient: "recipient",
                    event: "event",
                    notification: "notification",
                    error: "error",
                    reason: "BOUNCED",
                },
            ],
        };
        server.mockEndpoint().get("/messages").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.messages.list();
        expect(response).toEqual({
            paging: {
                cursor: "cursor",
                more: true,
            },
            results: [
                {
                    id: "id",
                    status: "CANCELED",
                    enqueued: 1000000,
                    sent: 1000000,
                    delivered: 1000000,
                    opened: 1000000,
                    clicked: 1000000,
                    recipient: "recipient",
                    event: "event",
                    notification: "notification",
                    error: "error",
                    reason: "BOUNCED",
                },
                {
                    id: "id",
                    status: "CANCELED",
                    enqueued: 1000000,
                    sent: 1000000,
                    delivered: 1000000,
                    opened: 1000000,
                    clicked: 1000000,
                    recipient: "recipient",
                    event: "event",
                    notification: "notification",
                    error: "error",
                    reason: "BOUNCED",
                },
            ],
        });
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            providers: [{ providers: { key: "value" } }, { providers: { key: "value" } }],
            id: "id",
            status: "CANCELED",
            enqueued: 1000000,
            sent: 1000000,
            delivered: 1000000,
            opened: 1000000,
            clicked: 1000000,
            recipient: "recipient",
            event: "event",
            notification: "notification",
            error: "error",
            reason: "BOUNCED",
        };
        server
            .mockEndpoint()
            .get("/messages/message_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.get("message_id");
        expect(response).toEqual({
            providers: [
                {
                    providers: {
                        key: "value",
                    },
                },
                {
                    providers: {
                        key: "value",
                    },
                },
            ],
            id: "id",
            status: "CANCELED",
            enqueued: 1000000,
            sent: 1000000,
            delivered: 1000000,
            opened: 1000000,
            clicked: 1000000,
            recipient: "recipient",
            event: "event",
            notification: "notification",
            error: "error",
            reason: "BOUNCED",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/messages/message_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.get("message_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/messages/message_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.get("message_id");
        }).rejects.toThrow(Courier.MessageNotFoundError);
    });

    test("getHistory (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { results: [{ results: { key: "value" } }, { results: { key: "value" } }] };
        server
            .mockEndpoint()
            .get("/messages/message_id/history")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.getHistory("message_id");
        expect(response).toEqual({
            results: [
                {
                    results: {
                        key: "value",
                    },
                },
                {
                    results: {
                        key: "value",
                    },
                },
            ],
        });
    });

    test("getHistory (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/messages/message_id/history")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.getHistory("message_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("getHistory (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/messages/message_id/history")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.getHistory("message_id");
        }).rejects.toThrow(Courier.MessageNotFoundError);
    });

    test("getContent (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            results: [
                {
                    channel: "channel",
                    channel_id: "channel_id",
                    content: {
                        html: "html",
                        title: "title",
                        body: "body",
                        subject: "subject",
                        text: "text",
                        blocks: [
                            { type: "type", text: "text" },
                            { type: "type", text: "text" },
                        ],
                    },
                },
                {
                    channel: "channel",
                    channel_id: "channel_id",
                    content: {
                        html: "html",
                        title: "title",
                        body: "body",
                        subject: "subject",
                        text: "text",
                        blocks: [
                            { type: "type", text: "text" },
                            { type: "type", text: "text" },
                        ],
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/messages/message_id/output")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.getContent("message_id");
        expect(response).toEqual({
            results: [
                {
                    channel: "channel",
                    channel_id: "channel_id",
                    content: {
                        html: "html",
                        title: "title",
                        body: "body",
                        subject: "subject",
                        text: "text",
                        blocks: [
                            {
                                type: "type",
                                text: "text",
                            },
                            {
                                type: "type",
                                text: "text",
                            },
                        ],
                    },
                },
                {
                    channel: "channel",
                    channel_id: "channel_id",
                    content: {
                        html: "html",
                        title: "title",
                        body: "body",
                        subject: "subject",
                        text: "text",
                        blocks: [
                            {
                                type: "type",
                                text: "text",
                            },
                            {
                                type: "type",
                                text: "text",
                            },
                        ],
                    },
                },
            ],
        });
    });

    test("getContent (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/messages/message_id/output")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.getContent("message_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("getContent (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/messages/message_id/output")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.getContent("message_id");
        }).rejects.toThrow(Courier.MessageNotFoundError);
    });

    test("archive", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        server.mockEndpoint().put("/requests/request_id/archive").respondWith().statusCode(200).build();

        const response = await client.messages.archive("request_id");
        expect(response).toEqual(undefined);
    });
});
