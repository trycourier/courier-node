/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CourierClient } from "../../src/Client";

describe("Notifications", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            paging: { cursor: "cursor", more: true },
            results: [
                {
                    created_at: 1000000,
                    updated_at: 1000000,
                    id: "id",
                    routing: { method: "all", channels: ["channels", "channels"] },
                    tags: {
                        data: [
                            { id: "id", name: "name" },
                            { id: "id", name: "name" },
                        ],
                    },
                    title: "title",
                    topic_id: "topic_id",
                    note: "note",
                },
                {
                    created_at: 1000000,
                    updated_at: 1000000,
                    id: "id",
                    routing: { method: "all", channels: ["channels", "channels"] },
                    tags: {
                        data: [
                            { id: "id", name: "name" },
                            { id: "id", name: "name" },
                        ],
                    },
                    title: "title",
                    topic_id: "topic_id",
                    note: "note",
                },
            ],
        };
        server.mockEndpoint().get("/notifications").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.notifications.list();
        expect(response).toEqual({
            paging: {
                cursor: "cursor",
                more: true,
            },
            results: [
                {
                    created_at: 1000000,
                    updated_at: 1000000,
                    id: "id",
                    routing: {
                        method: "all",
                        channels: ["channels", "channels"],
                    },
                    tags: {
                        data: [
                            {
                                id: "id",
                                name: "name",
                            },
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                    },
                    title: "title",
                    topic_id: "topic_id",
                    note: "note",
                },
                {
                    created_at: 1000000,
                    updated_at: 1000000,
                    id: "id",
                    routing: {
                        method: "all",
                        channels: ["channels", "channels"],
                    },
                    tags: {
                        data: [
                            {
                                id: "id",
                                name: "name",
                            },
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                    },
                    title: "title",
                    topic_id: "topic_id",
                    note: "note",
                },
            ],
        });
    });

    test("getContent", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            blocks: [
                {
                    alias: "alias",
                    context: "context",
                    id: "id",
                    type: "action",
                    content: "content",
                    locales: { locales: "locales" },
                    checksum: "checksum",
                },
                {
                    alias: "alias",
                    context: "context",
                    id: "id",
                    type: "action",
                    content: "content",
                    locales: { locales: "locales" },
                    checksum: "checksum",
                },
            ],
            channels: [
                {
                    id: "id",
                    type: "type",
                    content: { subject: "subject", title: "title" },
                    locales: { locales: { subject: "subject", title: "title" } },
                    checksum: "checksum",
                },
                {
                    id: "id",
                    type: "type",
                    content: { subject: "subject", title: "title" },
                    locales: { locales: { subject: "subject", title: "title" } },
                    checksum: "checksum",
                },
            ],
            checksum: "checksum",
        };
        server
            .mockEndpoint()
            .get("/notifications/id/content")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.notifications.getContent("id");
        expect(response).toEqual({
            blocks: [
                {
                    alias: "alias",
                    context: "context",
                    id: "id",
                    type: "action",
                    content: "content",
                    locales: {
                        locales: "locales",
                    },
                    checksum: "checksum",
                },
                {
                    alias: "alias",
                    context: "context",
                    id: "id",
                    type: "action",
                    content: "content",
                    locales: {
                        locales: "locales",
                    },
                    checksum: "checksum",
                },
            ],
            channels: [
                {
                    id: "id",
                    type: "type",
                    content: {
                        subject: "subject",
                        title: "title",
                    },
                    locales: {
                        locales: {
                            subject: "subject",
                            title: "title",
                        },
                    },
                    checksum: "checksum",
                },
                {
                    id: "id",
                    type: "type",
                    content: {
                        subject: "subject",
                        title: "title",
                    },
                    locales: {
                        locales: {
                            subject: "subject",
                            title: "title",
                        },
                    },
                    checksum: "checksum",
                },
            ],
            checksum: "checksum",
        });
    });

    test("getDraftContent", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            blocks: [
                {
                    alias: "alias",
                    context: "context",
                    id: "id",
                    type: "action",
                    content: "content",
                    locales: { locales: "locales" },
                    checksum: "checksum",
                },
                {
                    alias: "alias",
                    context: "context",
                    id: "id",
                    type: "action",
                    content: "content",
                    locales: { locales: "locales" },
                    checksum: "checksum",
                },
            ],
            channels: [
                {
                    id: "id",
                    type: "type",
                    content: { subject: "subject", title: "title" },
                    locales: { locales: { subject: "subject", title: "title" } },
                    checksum: "checksum",
                },
                {
                    id: "id",
                    type: "type",
                    content: { subject: "subject", title: "title" },
                    locales: { locales: { subject: "subject", title: "title" } },
                    checksum: "checksum",
                },
            ],
            checksum: "checksum",
        };
        server
            .mockEndpoint()
            .get("/notifications/id/draft/content")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.notifications.getDraftContent("id");
        expect(response).toEqual({
            blocks: [
                {
                    alias: "alias",
                    context: "context",
                    id: "id",
                    type: "action",
                    content: "content",
                    locales: {
                        locales: "locales",
                    },
                    checksum: "checksum",
                },
                {
                    alias: "alias",
                    context: "context",
                    id: "id",
                    type: "action",
                    content: "content",
                    locales: {
                        locales: "locales",
                    },
                    checksum: "checksum",
                },
            ],
            channels: [
                {
                    id: "id",
                    type: "type",
                    content: {
                        subject: "subject",
                        title: "title",
                    },
                    locales: {
                        locales: {
                            subject: "subject",
                            title: "title",
                        },
                    },
                    checksum: "checksum",
                },
                {
                    id: "id",
                    type: "type",
                    content: {
                        subject: "subject",
                        title: "title",
                    },
                    locales: {
                        locales: {
                            subject: "subject",
                            title: "title",
                        },
                    },
                    checksum: "checksum",
                },
            ],
            checksum: "checksum",
        });
    });

    test("getSubmissionChecks", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            checks: [
                { updated: 1000000, id: "id", status: "RESOLVED", type: "custom" },
                { updated: 1000000, id: "id", status: "RESOLVED", type: "custom" },
            ],
        };
        server
            .mockEndpoint()
            .get("/notifications/id/submissionId/checks")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.notifications.getSubmissionChecks("id", "submissionId");
        expect(response).toEqual({
            checks: [
                {
                    updated: 1000000,
                    id: "id",
                    status: "RESOLVED",
                    type: "custom",
                },
                {
                    updated: 1000000,
                    id: "id",
                    status: "RESOLVED",
                    type: "custom",
                },
            ],
        });
    });

    test("replaceSubmissionChecks", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            checks: [
                { id: "id", status: "RESOLVED", type: "custom" },
                { id: "id", status: "RESOLVED", type: "custom" },
            ],
        };
        const rawResponseBody = {
            checks: [
                { updated: 1000000, id: "id", status: "RESOLVED", type: "custom" },
                { updated: 1000000, id: "id", status: "RESOLVED", type: "custom" },
            ],
        };
        server
            .mockEndpoint()
            .put("/notifications/id/submissionId/checks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.notifications.replaceSubmissionChecks("id", "submissionId", {
            checks: [
                {
                    id: "id",
                    status: "RESOLVED",
                    type: "custom",
                },
                {
                    id: "id",
                    status: "RESOLVED",
                    type: "custom",
                },
            ],
        });
        expect(response).toEqual({
            checks: [
                {
                    updated: 1000000,
                    id: "id",
                    status: "RESOLVED",
                    type: "custom",
                },
                {
                    updated: 1000000,
                    id: "id",
                    status: "RESOLVED",
                    type: "custom",
                },
            ],
        });
    });

    test("cancelSubmission", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/notifications/id/submissionId/checks").respondWith().statusCode(200).build();

        const response = await client.notifications.cancelSubmission("id", "submissionId");
        expect(response).toEqual(undefined);
    });
});
