/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CourierClient } from "../../src/Client";
import * as Courier from "../../src/api/index";

describe("Profiles", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            profile: { profile: { key: "value" } },
            preferences: {
                categories: {
                    categories: {
                        status: "OPTED_IN",
                        rules: [
                            { start: "start", until: "until" },
                            { start: "start", until: "until" },
                        ],
                        channel_preferences: [{ channel: "direct_message" }, { channel: "direct_message" }],
                    },
                },
                notifications: {
                    notifications: {
                        status: "OPTED_IN",
                        rules: [
                            { start: "start", until: "until" },
                            { start: "start", until: "until" },
                        ],
                        channel_preferences: [{ channel: "direct_message" }, { channel: "direct_message" }],
                    },
                },
            },
        };
        server.mockEndpoint().get("/profiles/user_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.profiles.get("user_id");
        expect(response).toEqual({
            profile: {
                profile: {
                    key: "value",
                },
            },
            preferences: {
                categories: {
                    categories: {
                        status: "OPTED_IN",
                        rules: [
                            {
                                start: "start",
                                until: "until",
                            },
                            {
                                start: "start",
                                until: "until",
                            },
                        ],
                        channel_preferences: [
                            {
                                channel: "direct_message",
                            },
                            {
                                channel: "direct_message",
                            },
                        ],
                    },
                },
                notifications: {
                    notifications: {
                        status: "OPTED_IN",
                        rules: [
                            {
                                start: "start",
                                until: "until",
                            },
                            {
                                start: "start",
                                until: "until",
                            },
                        ],
                        channel_preferences: [
                            {
                                channel: "direct_message",
                            },
                            {
                                channel: "direct_message",
                            },
                        ],
                    },
                },
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server.mockEndpoint().get("/profiles/user_id").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.profiles.get("user_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("replace (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = { profile: { profile: { key: "value" } } };
        const rawResponseBody = { status: "SUCCESS" };
        server
            .mockEndpoint()
            .put("/profiles/user_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.profiles.replace("user_id", {
            profile: {
                profile: {
                    key: "value",
                },
            },
        });
        expect(response).toEqual({
            status: "SUCCESS",
        });
    });

    test("replace (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = { profile: { profile: { key: "value" } } };
        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .put("/profiles/user_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.profiles.replace("user_id", {
                profile: {
                    profile: {
                        key: "value",
                    },
                },
            });
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("mergeProfile", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            patch: [
                { op: "op", path: "path", value: "value" },
                { op: "op", path: "path", value: "value" },
            ],
        };

        server.mockEndpoint().patch("/profiles/user_id").jsonBody(rawRequestBody).respondWith().statusCode(200).build();

        const response = await client.profiles.mergeProfile("user_id", {
            patch: [
                {
                    op: "op",
                    path: "path",
                    value: "value",
                },
                {
                    op: "op",
                    path: "path",
                    value: "value",
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/profiles/user_id").respondWith().statusCode(200).build();

        const response = await client.profiles.delete("user_id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .delete("/profiles/user_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.profiles.delete("user_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("getListSubscriptions (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            paging: { cursor: "cursor", more: true },
            results: [
                {
                    id: "id",
                    name: "name",
                    created: "created",
                    updated: "updated",
                    preferences: {
                        categories: { categories: { status: "OPTED_IN", rules: [], channel_preferences: [] } },
                        notifications: { notifications: { status: "OPTED_IN", rules: [], channel_preferences: [] } },
                    },
                },
                {
                    id: "id",
                    name: "name",
                    created: "created",
                    updated: "updated",
                    preferences: {
                        categories: { categories: { status: "OPTED_IN", rules: [], channel_preferences: [] } },
                        notifications: { notifications: { status: "OPTED_IN", rules: [], channel_preferences: [] } },
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/profiles/user_id/lists")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.profiles.getListSubscriptions("user_id");
        expect(response).toEqual({
            paging: {
                cursor: "cursor",
                more: true,
            },
            results: [
                {
                    id: "id",
                    name: "name",
                    created: "created",
                    updated: "updated",
                    preferences: {
                        categories: {
                            categories: {
                                status: "OPTED_IN",
                                rules: [],
                                channel_preferences: [],
                            },
                        },
                        notifications: {
                            notifications: {
                                status: "OPTED_IN",
                                rules: [],
                                channel_preferences: [],
                            },
                        },
                    },
                },
                {
                    id: "id",
                    name: "name",
                    created: "created",
                    updated: "updated",
                    preferences: {
                        categories: {
                            categories: {
                                status: "OPTED_IN",
                                rules: [],
                                channel_preferences: [],
                            },
                        },
                        notifications: {
                            notifications: {
                                status: "OPTED_IN",
                                rules: [],
                                channel_preferences: [],
                            },
                        },
                    },
                },
            ],
        });
    });

    test("getListSubscriptions (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/profiles/user_id/lists")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.profiles.getListSubscriptions("user_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("deleteListSubscription (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { status: "SUCCESS" };
        server
            .mockEndpoint()
            .delete("/profiles/user_id/lists")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.profiles.deleteListSubscription("user_id");
        expect(response).toEqual({
            status: "SUCCESS",
        });
    });

    test("deleteListSubscription (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .delete("/profiles/user_id/lists")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.profiles.deleteListSubscription("user_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });
});
