/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CourierClient } from "../../src/Client";
import * as Courier from "../../src/api/index";

describe("Tenants", () => {
    test("createOrReplace (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "name",
            parent_tenant_id: undefined,
            default_preferences: undefined,
            properties: undefined,
            user_profile: undefined,
            brand_id: undefined,
        };
        const rawResponseBody = {
            id: "id",
            name: "name",
            parent_tenant_id: "parent_tenant_id",
            default_preferences: {
                items: [
                    {
                        id: "id",
                        status: "OPTED_OUT",
                        has_custom_routing: true,
                        custom_routing: ["direct_message", "direct_message"],
                    },
                    {
                        id: "id",
                        status: "OPTED_OUT",
                        has_custom_routing: true,
                        custom_routing: ["direct_message", "direct_message"],
                    },
                ],
            },
            properties: { properties: { key: "value" } },
            user_profile: { user_profile: { key: "value" } },
            brand_id: "brand_id",
        };
        server
            .mockEndpoint()
            .put("/tenants/tenant_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tenants.createOrReplace("tenant_id", {
            name: "name",
            parent_tenant_id: undefined,
            default_preferences: undefined,
            properties: undefined,
            user_profile: undefined,
            brand_id: undefined,
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            parent_tenant_id: "parent_tenant_id",
            default_preferences: {
                items: [
                    {
                        id: "id",
                        status: "OPTED_OUT",
                        has_custom_routing: true,
                        custom_routing: ["direct_message", "direct_message"],
                    },
                    {
                        id: "id",
                        status: "OPTED_OUT",
                        has_custom_routing: true,
                        custom_routing: ["direct_message", "direct_message"],
                    },
                ],
            },
            properties: {
                properties: {
                    key: "value",
                },
            },
            user_profile: {
                user_profile: {
                    key: "value",
                },
            },
            brand_id: "brand_id",
        });
    });

    test("createOrReplace (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "name",
            parent_tenant_id: undefined,
            default_preferences: undefined,
            properties: undefined,
            user_profile: undefined,
            brand_id: undefined,
        };
        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .put("/tenants/tenant_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tenants.createOrReplace("tenant_id", {
                name: "name",
                parent_tenant_id: undefined,
                default_preferences: undefined,
                properties: undefined,
                user_profile: undefined,
                brand_id: undefined,
            });
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            parent_tenant_id: "parent_tenant_id",
            default_preferences: {
                items: [
                    {
                        id: "id",
                        status: "OPTED_OUT",
                        has_custom_routing: true,
                        custom_routing: ["direct_message", "direct_message"],
                    },
                    {
                        id: "id",
                        status: "OPTED_OUT",
                        has_custom_routing: true,
                        custom_routing: ["direct_message", "direct_message"],
                    },
                ],
            },
            properties: { properties: { key: "value" } },
            user_profile: { user_profile: { key: "value" } },
            brand_id: "brand_id",
        };
        server.mockEndpoint().get("/tenants/tenant_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.tenants.get("tenant_id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            parent_tenant_id: "parent_tenant_id",
            default_preferences: {
                items: [
                    {
                        id: "id",
                        status: "OPTED_OUT",
                        has_custom_routing: true,
                        custom_routing: ["direct_message", "direct_message"],
                    },
                    {
                        id: "id",
                        status: "OPTED_OUT",
                        has_custom_routing: true,
                        custom_routing: ["direct_message", "direct_message"],
                    },
                ],
            },
            properties: {
                properties: {
                    key: "value",
                },
            },
            user_profile: {
                user_profile: {
                    key: "value",
                },
            },
            brand_id: "brand_id",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server.mockEndpoint().get("/tenants/tenant_id").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.tenants.get("tenant_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            cursor: "cursor",
            has_more: true,
            items: [
                {
                    id: "id",
                    name: "name",
                    parent_tenant_id: "parent_tenant_id",
                    default_preferences: {
                        items: [
                            {
                                id: "id",
                                status: "OPTED_OUT",
                                has_custom_routing: true,
                                custom_routing: ["direct_message", "direct_message"],
                            },
                            {
                                id: "id",
                                status: "OPTED_OUT",
                                has_custom_routing: true,
                                custom_routing: ["direct_message", "direct_message"],
                            },
                        ],
                    },
                    properties: { properties: { key: "value" } },
                    user_profile: { user_profile: { key: "value" } },
                    brand_id: "brand_id",
                },
                {
                    id: "id",
                    name: "name",
                    parent_tenant_id: "parent_tenant_id",
                    default_preferences: {
                        items: [
                            {
                                id: "id",
                                status: "OPTED_OUT",
                                has_custom_routing: true,
                                custom_routing: ["direct_message", "direct_message"],
                            },
                            {
                                id: "id",
                                status: "OPTED_OUT",
                                has_custom_routing: true,
                                custom_routing: ["direct_message", "direct_message"],
                            },
                        ],
                    },
                    properties: { properties: { key: "value" } },
                    user_profile: { user_profile: { key: "value" } },
                    brand_id: "brand_id",
                },
            ],
            next_url: "next_url",
            url: "url",
            type: "list",
        };
        server.mockEndpoint().get("/tenants").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.tenants.list();
        expect(response).toEqual({
            cursor: "cursor",
            has_more: true,
            items: [
                {
                    id: "id",
                    name: "name",
                    parent_tenant_id: "parent_tenant_id",
                    default_preferences: {
                        items: [
                            {
                                id: "id",
                                status: "OPTED_OUT",
                                has_custom_routing: true,
                                custom_routing: ["direct_message", "direct_message"],
                            },
                            {
                                id: "id",
                                status: "OPTED_OUT",
                                has_custom_routing: true,
                                custom_routing: ["direct_message", "direct_message"],
                            },
                        ],
                    },
                    properties: {
                        properties: {
                            key: "value",
                        },
                    },
                    user_profile: {
                        user_profile: {
                            key: "value",
                        },
                    },
                    brand_id: "brand_id",
                },
                {
                    id: "id",
                    name: "name",
                    parent_tenant_id: "parent_tenant_id",
                    default_preferences: {
                        items: [
                            {
                                id: "id",
                                status: "OPTED_OUT",
                                has_custom_routing: true,
                                custom_routing: ["direct_message", "direct_message"],
                            },
                            {
                                id: "id",
                                status: "OPTED_OUT",
                                has_custom_routing: true,
                                custom_routing: ["direct_message", "direct_message"],
                            },
                        ],
                    },
                    properties: {
                        properties: {
                            key: "value",
                        },
                    },
                    user_profile: {
                        user_profile: {
                            key: "value",
                        },
                    },
                    brand_id: "brand_id",
                },
            ],
            next_url: "next_url",
            url: "url",
            type: "list",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/tenants/tenant_id").respondWith().statusCode(200).build();

        const response = await client.tenants.delete("tenant_id");
        expect(response).toEqual(undefined);
    });

    test("getUsersByTenant (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            items: [
                { user_id: "user_id", type: "user", tenant_id: "tenant_id", profile: { profile: { key: "value" } } },
                { user_id: "user_id", type: "user", tenant_id: "tenant_id", profile: { profile: { key: "value" } } },
            ],
            has_more: true,
            url: "url",
            next_url: "next_url",
            cursor: "cursor",
            type: "list",
        };
        server
            .mockEndpoint()
            .get("/tenants/tenant_id/users")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tenants.getUsersByTenant("tenant_id");
        expect(response).toEqual({
            items: [
                {
                    user_id: "user_id",
                    type: "user",
                    tenant_id: "tenant_id",
                    profile: {
                        profile: {
                            key: "value",
                        },
                    },
                },
                {
                    user_id: "user_id",
                    type: "user",
                    tenant_id: "tenant_id",
                    profile: {
                        profile: {
                            key: "value",
                        },
                    },
                },
            ],
            has_more: true,
            url: "url",
            next_url: "next_url",
            cursor: "cursor",
            type: "list",
        });
    });

    test("getUsersByTenant (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/tenants/tenant_id/users")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tenants.getUsersByTenant("tenant_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("createOrReplaceDefaultPreferencesForTopic", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = { status: "OPTED_IN", has_custom_routing: true, custom_routing: ["inbox"] };

        server
            .mockEndpoint()
            .put("/tenants/tenantABC/default_preferences/items/HB529N49MD4D5PMX9WR5P4JH78NA")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.tenants.createOrReplaceDefaultPreferencesForTopic(
            "tenantABC",
            "HB529N49MD4D5PMX9WR5P4JH78NA",
            {
                status: "OPTED_IN",
                has_custom_routing: true,
                custom_routing: ["inbox"],
            },
        );
        expect(response).toEqual(undefined);
    });

    test("removeDefaultPreferencesForTopic", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/tenants/tenant_id/default_preferences/items/topic_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.tenants.removeDefaultPreferencesForTopic("tenant_id", "topic_id");
        expect(response).toEqual(undefined);
    });

    test("getTemplateByTenant (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                routing: { method: "all", channels: ["channels", "channels"] },
                content: {
                    version: "version",
                    brand: { key: "value" },
                    elements: [
                        {
                            type: "text",
                            content: "content",
                            align: "left",
                            text_style: "text",
                            color: "color",
                            bold: "bold",
                            italic: "italic",
                            strikethrough: "strikethrough",
                            underline: "underline",
                            locales: { locales: { content: "content" } },
                            format: "markdown",
                            channels: ["channels", "channels"],
                            ref: "ref",
                            if: "if",
                            loop: "loop",
                        },
                        {
                            type: "text",
                            content: "content",
                            align: "left",
                            text_style: "text",
                            color: "color",
                            bold: "bold",
                            italic: "italic",
                            strikethrough: "strikethrough",
                            underline: "underline",
                            locales: { locales: { content: "content" } },
                            format: "markdown",
                            channels: ["channels", "channels"],
                            ref: "ref",
                            if: "if",
                            loop: "loop",
                        },
                    ],
                },
            },
            id: "id",
            created_at: "created_at",
            updated_at: "updated_at",
            published_at: "published_at",
            version: "version",
        };
        server
            .mockEndpoint()
            .get("/tenants/tenant_id/templates/template_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tenants.getTemplateByTenant("tenant_id", "template_id");
        expect(response).toEqual({
            data: {
                routing: {
                    method: "all",
                    channels: ["channels", "channels"],
                },
                content: {
                    version: "version",
                    brand: {
                        key: "value",
                    },
                    elements: [
                        {
                            type: "text",
                            content: "content",
                            align: "left",
                            text_style: "text",
                            color: "color",
                            bold: "bold",
                            italic: "italic",
                            strikethrough: "strikethrough",
                            underline: "underline",
                            locales: {
                                locales: {
                                    content: "content",
                                },
                            },
                            format: "markdown",
                            channels: ["channels", "channels"],
                            ref: "ref",
                            if: "if",
                            loop: "loop",
                        },
                        {
                            type: "text",
                            content: "content",
                            align: "left",
                            text_style: "text",
                            color: "color",
                            bold: "bold",
                            italic: "italic",
                            strikethrough: "strikethrough",
                            underline: "underline",
                            locales: {
                                locales: {
                                    content: "content",
                                },
                            },
                            format: "markdown",
                            channels: ["channels", "channels"],
                            ref: "ref",
                            if: "if",
                            loop: "loop",
                        },
                    ],
                },
            },
            id: "id",
            created_at: "created_at",
            updated_at: "updated_at",
            published_at: "published_at",
            version: "version",
        });
    });

    test("getTemplateByTenant (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/tenants/tenant_id/templates/template_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tenants.getTemplateByTenant("tenant_id", "template_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("getTemplateListByTenant (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            items: [
                {
                    data: { routing: { method: "all", channels: ["channels", "channels"] } },
                    id: "id",
                    created_at: "created_at",
                    updated_at: "updated_at",
                    published_at: "published_at",
                    version: "version",
                },
                {
                    data: { routing: { method: "all", channels: ["channels", "channels"] } },
                    id: "id",
                    created_at: "created_at",
                    updated_at: "updated_at",
                    published_at: "published_at",
                    version: "version",
                },
            ],
            has_more: true,
            url: "url",
            next_url: "next_url",
            cursor: "cursor",
            type: "list",
        };
        server
            .mockEndpoint()
            .get("/tenants/tenant_id/templates")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tenants.getTemplateListByTenant("tenant_id");
        expect(response).toEqual({
            items: [
                {
                    data: {
                        routing: {
                            method: "all",
                            channels: ["channels", "channels"],
                        },
                    },
                    id: "id",
                    created_at: "created_at",
                    updated_at: "updated_at",
                    published_at: "published_at",
                    version: "version",
                },
                {
                    data: {
                        routing: {
                            method: "all",
                            channels: ["channels", "channels"],
                        },
                    },
                    id: "id",
                    created_at: "created_at",
                    updated_at: "updated_at",
                    published_at: "published_at",
                    version: "version",
                },
            ],
            has_more: true,
            url: "url",
            next_url: "next_url",
            cursor: "cursor",
            type: "list",
        });
    });

    test("getTemplateListByTenant (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/tenants/tenant_id/templates")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tenants.getTemplateListByTenant("tenant_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });
});
