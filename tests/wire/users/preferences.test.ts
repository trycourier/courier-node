/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { CourierClient } from "../../../src/Client";
import * as Courier from "../../../src/api/index";

describe("Preferences", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            paging: { cursor: "cursor", more: true },
            items: [
                {
                    custom_routing: ["direct_message", "direct_message"],
                    default_status: "OPTED_IN",
                    has_custom_routing: true,
                    status: "OPTED_IN",
                    topic_id: "topic_id",
                    topic_name: "topic_name",
                },
                {
                    custom_routing: ["direct_message", "direct_message"],
                    default_status: "OPTED_IN",
                    has_custom_routing: true,
                    status: "OPTED_IN",
                    topic_id: "topic_id",
                    topic_name: "topic_name",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/users/user_id/preferences")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.preferences.list("user_id");
        expect(response).toEqual({
            paging: {
                cursor: "cursor",
                more: true,
            },
            items: [
                {
                    custom_routing: ["direct_message", "direct_message"],
                    default_status: "OPTED_IN",
                    has_custom_routing: true,
                    status: "OPTED_IN",
                    topic_id: "topic_id",
                    topic_name: "topic_name",
                },
                {
                    custom_routing: ["direct_message", "direct_message"],
                    default_status: "OPTED_IN",
                    has_custom_routing: true,
                    status: "OPTED_IN",
                    topic_id: "topic_id",
                    topic_name: "topic_name",
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/users/user_id/preferences")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.preferences.list("user_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            topic: {
                custom_routing: ["direct_message", "direct_message"],
                default_status: "OPTED_IN",
                has_custom_routing: true,
                status: "OPTED_IN",
                topic_id: "topic_id",
                topic_name: "topic_name",
            },
        };
        server
            .mockEndpoint()
            .get("/users/user_id/preferences/topic_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.preferences.get("user_id", "topic_id");
        expect(response).toEqual({
            topic: {
                custom_routing: ["direct_message", "direct_message"],
                default_status: "OPTED_IN",
                has_custom_routing: true,
                status: "OPTED_IN",
                topic_id: "topic_id",
                topic_name: "topic_name",
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/users/user_id/preferences/topic_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.preferences.get("user_id", "topic_id");
        }).rejects.toThrow(Courier.NotFoundError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            topic: { status: "OPTED_IN", has_custom_routing: true, custom_routing: ["inbox", "email"] },
        };
        const rawResponseBody = { message: "success" };
        server
            .mockEndpoint()
            .put("/users/abc-123/preferences/74Q4QGFBEX481DP6JRPMV751H4XT")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.preferences.update("abc-123", "74Q4QGFBEX481DP6JRPMV751H4XT", {
            topic: {
                status: "OPTED_IN",
                has_custom_routing: true,
                custom_routing: ["inbox", "email"],
            },
        });
        expect(response).toEqual({
            message: "success",
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            topic: { status: "OPTED_IN", custom_routing: undefined, has_custom_routing: undefined },
        };
        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .put("/users/user_id/preferences/topic_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.preferences.update("user_id", "topic_id", {
                topic: {
                    status: "OPTED_IN",
                    custom_routing: undefined,
                    has_custom_routing: undefined,
                },
            });
        }).rejects.toThrow(Courier.BadRequestError);
    });
});
