/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { CourierClient } from "../../../src/Client";

describe("Tenants", () => {
    test("addMultple", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            tenants: [
                { user_id: undefined, type: undefined, tenant_id: "tenant_id", profile: undefined },
                { user_id: undefined, type: undefined, tenant_id: "tenant_id", profile: undefined },
            ],
        };

        server
            .mockEndpoint()
            .put("/users/user_id/tenants")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.users.tenants.addMultple("user_id", {
            tenants: [
                {
                    user_id: undefined,
                    type: undefined,
                    tenant_id: "tenant_id",
                    profile: undefined,
                },
                {
                    user_id: undefined,
                    type: undefined,
                    tenant_id: "tenant_id",
                    profile: undefined,
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("add", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = { profile: undefined };

        server
            .mockEndpoint()
            .put("/users/user_id/tenants/tenant_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.users.tenants.add("user_id", "tenant_id", {
            profile: undefined,
        });
        expect(response).toEqual(undefined);
    });

    test("removeAll", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/users/user_id/tenants").respondWith().statusCode(200).build();

        const response = await client.users.tenants.removeAll("user_id");
        expect(response).toEqual(undefined);
    });

    test("remove", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/users/user_id/tenants/tenant_id").respondWith().statusCode(200).build();

        const response = await client.users.tenants.remove("user_id", "tenant_id");
        expect(response).toEqual(undefined);
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            items: [
                { user_id: "user_id", type: "user", tenant_id: "tenant_id", profile: { profile: { key: "value" } } },
                { user_id: "user_id", type: "user", tenant_id: "tenant_id", profile: { profile: { key: "value" } } },
            ],
            has_more: true,
            url: "url",
            next_url: "next_url",
            cursor: "cursor",
            type: "list",
        };
        server
            .mockEndpoint()
            .get("/users/user_id/tenants")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.tenants.list("user_id");
        expect(response).toEqual({
            items: [
                {
                    user_id: "user_id",
                    type: "user",
                    tenant_id: "tenant_id",
                    profile: {
                        profile: {
                            key: "value",
                        },
                    },
                },
                {
                    user_id: "user_id",
                    type: "user",
                    tenant_id: "tenant_id",
                    profile: {
                        profile: {
                            key: "value",
                        },
                    },
                },
            ],
            has_more: true,
            url: "url",
            next_url: "next_url",
            cursor: "cursor",
            type: "list",
        });
    });
});
