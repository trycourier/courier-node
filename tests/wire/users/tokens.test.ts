/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { CourierClient } from "../../../src/Client";
import * as Courier from "../../../src/api/index";

describe("Tokens", () => {
    test("addMultiple (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        server.mockEndpoint().put("/users/user_id/tokens").respondWith().statusCode(200).build();

        const response = await client.users.tokens.addMultiple("user_id");
        expect(response).toEqual(undefined);
    });

    test("addMultiple (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .put("/users/user_id/tokens")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.tokens.addMultiple("user_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("add (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            token: undefined,
            provider_key: "firebase-fcm",
            expiry_date: undefined,
            properties: undefined,
            device: undefined,
            tracking: undefined,
        };

        server
            .mockEndpoint()
            .put("/users/user_id/tokens/token")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.users.tokens.add("user_id", "token", {
            token: undefined,
            provider_key: "firebase-fcm",
            expiry_date: undefined,
            properties: undefined,
            device: undefined,
            tracking: undefined,
        });
        expect(response).toEqual(undefined);
    });

    test("add (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            token: undefined,
            provider_key: "firebase-fcm",
            expiry_date: undefined,
            properties: undefined,
            device: undefined,
            tracking: undefined,
        };
        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .put("/users/user_id/tokens/token")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.tokens.add("user_id", "token", {
                token: undefined,
                provider_key: "firebase-fcm",
                expiry_date: undefined,
                properties: undefined,
                device: undefined,
                tracking: undefined,
            });
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            patch: [
                { op: "op", path: "path", value: undefined },
                { op: "op", path: "path", value: undefined },
            ],
        };

        server
            .mockEndpoint()
            .patch("/users/user_id/tokens/token")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.users.tokens.update("user_id", "token", {
            patch: [
                {
                    op: "op",
                    path: "path",
                    value: undefined,
                },
                {
                    op: "op",
                    path: "path",
                    value: undefined,
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            patch: [
                { op: "op", path: "path", value: undefined },
                { op: "op", path: "path", value: undefined },
            ],
        };
        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .patch("/users/user_id/tokens/token")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.tokens.update("user_id", "token", {
                patch: [
                    {
                        op: "op",
                        path: "path",
                        value: undefined,
                    },
                    {
                        op: "op",
                        path: "path",
                        value: undefined,
                    },
                ],
            });
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            status: "active",
            status_reason: "status_reason",
            token: "token",
            provider_key: "firebase-fcm",
            expiry_date: "expiry_date",
            properties: { key: "value" },
            device: {
                app_id: "app_id",
                ad_id: "ad_id",
                device_id: "device_id",
                platform: "platform",
                manufacturer: "manufacturer",
                model: "model",
            },
            tracking: { os_version: "os_version", ip: "ip", lat: "lat", long: "long" },
        };
        server
            .mockEndpoint()
            .get("/users/user_id/tokens/token")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.tokens.get("user_id", "token");
        expect(response).toEqual({
            status: "active",
            status_reason: "status_reason",
            token: "token",
            provider_key: "firebase-fcm",
            expiry_date: "expiry_date",
            properties: {
                key: "value",
            },
            device: {
                app_id: "app_id",
                ad_id: "ad_id",
                device_id: "device_id",
                platform: "platform",
                manufacturer: "manufacturer",
                model: "model",
            },
            tracking: {
                os_version: "os_version",
                ip: "ip",
                lat: "lat",
                long: "long",
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/users/user_id/tokens/token")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.tokens.get("user_id", "token");
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                token: "token",
                provider_key: "firebase-fcm",
                expiry_date: "expiry_date",
                properties: { key: "value" },
                device: {
                    app_id: "app_id",
                    ad_id: "ad_id",
                    device_id: "device_id",
                    platform: "platform",
                    manufacturer: "manufacturer",
                    model: "model",
                },
                tracking: { os_version: "os_version", ip: "ip", lat: "lat", long: "long" },
            },
            {
                token: "token",
                provider_key: "firebase-fcm",
                expiry_date: "expiry_date",
                properties: { key: "value" },
                device: {
                    app_id: "app_id",
                    ad_id: "ad_id",
                    device_id: "device_id",
                    platform: "platform",
                    manufacturer: "manufacturer",
                    model: "model",
                },
                tracking: { os_version: "os_version", ip: "ip", lat: "lat", long: "long" },
            },
        ];
        server
            .mockEndpoint()
            .get("/users/user_id/tokens")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.tokens.list("user_id");
        expect(response).toEqual([
            {
                token: "token",
                provider_key: "firebase-fcm",
                expiry_date: "expiry_date",
                properties: {
                    key: "value",
                },
                device: {
                    app_id: "app_id",
                    ad_id: "ad_id",
                    device_id: "device_id",
                    platform: "platform",
                    manufacturer: "manufacturer",
                    model: "model",
                },
                tracking: {
                    os_version: "os_version",
                    ip: "ip",
                    lat: "lat",
                    long: "long",
                },
            },
            {
                token: "token",
                provider_key: "firebase-fcm",
                expiry_date: "expiry_date",
                properties: {
                    key: "value",
                },
                device: {
                    app_id: "app_id",
                    ad_id: "ad_id",
                    device_id: "device_id",
                    platform: "platform",
                    manufacturer: "manufacturer",
                    model: "model",
                },
                tracking: {
                    os_version: "os_version",
                    ip: "ip",
                    lat: "lat",
                    long: "long",
                },
            },
        ]);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "invalid_request_error", message: "message" };
        server
            .mockEndpoint()
            .get("/users/user_id/tokens")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.tokens.list("user_id");
        }).rejects.toThrow(Courier.BadRequestError);
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new CourierClient({ authorizationToken: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/users/user_id/tokens/token").respondWith().statusCode(200).build();

        const response = await client.users.tokens.delete("user_id", "token");
        expect(response).toEqual(undefined);
    });
});
